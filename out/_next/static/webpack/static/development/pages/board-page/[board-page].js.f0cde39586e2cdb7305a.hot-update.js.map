{"version":3,"file":"static/webpack/static/development/pages/board-page/[board-page].js.f0cde39586e2cdb7305a.hot-update.js","sources":["webpack:///./pages/board-page/[board-page].js"],"sourcesContent":["import React from \"react\";\nimport { useRouter } from 'next/router';\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n// core components\nimport Header from \"components/Header/Header.js\";\nimport Footer from \"components/Footer/Footer.js\";\nimport HeaderLinks from \"components/Header/HeaderLinks.js\";\nimport YouTube from \"react-youtube\"\n\n\nimport profilePageStyles from \"assets/jss/nextjs-material-kit/pages/profilePage.js\";\nimport { cardTitle } from \"assets/jss/nextjs-material-kit.js\";\n\nimport boardData from 'lib/boards.json';\n\nconst styles = {\n    ...profilePageStyles,\n    cardTitle,\n}\n\nconst useStyles = makeStyles(styles);\n\nexport default function BoardPage({ props, boardData }) {\n    const router = useRouter();\n    const id = router.query['board-page'];\n    const opts = {\n        height: '220',\n        width: '320',\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            // autoplay: 1,\n        },\n    };\n\n    let boardDetail = {}\n    boardData.boards.forEach(element => {\n        if (element.model === id) {\n            boardDetail = element;\n        }\n    });\n\n    let video = <br />\n    if ('video' in boardDetail) {\n        video = <YouTube videoId={boardDetail.video} opts={opts} />\n    }\n\n\n    const classes = useStyles();\n    const { ...rest } = props;\n\n    return (\n        <div >\n            <div>\n                <Header\n                    color=\"white\"\n                    brand=\"NextJS Material Kit\"\n                    rightLinks={<HeaderLinks />}\n                    fixed\n                    {...rest}\n                />\n            </div>\n\n\n            <div className={classNames(classes.main)}>\n                <div className='board-container'>\n                    <div className={\"column left\"}>\n                        <h3>{boardDetail.name}</h3>\n                        <img\n                            style={{ height: \"100px\", maxWidth: \"20em\", display: \"block\", marginLeft: \"auto\", marginRight: \"auto\" }}\n                            src={boardDetail.logo}\n                            alt=\"Board Logo\"\n                        />\n                        <img\n                            style={{ height: \"40%\", display: \"block\", marginLeft: \"auto\", marginRight: \"auto\" }}\n                            src={boardDetail.img}\n                            alt=\"BarracBoard Imageuda\"\n                        />\n                    </div>\n\n                    <hr />\n                    <div className={\"column right\"}>\n                        <span>\n                            <br />\n                            <p><strong>{boardDetail.description}</strong></p>\n                            <hr />\n                            <h6>Size Range: {boardDetail.dims.range}</h6>\n                            <h6>Nose: {boardDetail.dims.Nose}</h6>\n                            <h6>Middle: {boardDetail.dims.Middle}</h6>\n                            <h6>Tail: {boardDetail.dims.Tail}</h6>\n                            <h6>Thickness: {boardDetail.dims.Thickness}</h6>\n                            <h6>Volume: {boardDetail.dims.Volume}</h6>\n                            <p><strong>--------</strong></p>\n                            <h4><strong>Prices:</strong></h4>\n                            <h6>Epoxy: ${boardDetail.eps_price}</h6>\n                            <h6>Polyester: ${boardDetail.poly_price}</h6>\n                            <h6>With suspension: + $60</h6>\n                            <h6>Stringerless carbon strip flex deck!!!: + $30 (available in all models)</h6>\n                        </span>\n\n                    </div>\n                    <br />\n                    {/* <div>\n                        <iframe\n                            width=\"560\"\n                            height=\"315\"\n                            src=\"https://www.youtube.com/embed/fPmplk0aAA8\"\n                            frameBorder=\"0\"\n                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                            allowFullScreen>\n                        </iframe>\n                    </div> */}\n                </div>\n            </div>\n            <div className=\"video\">\n                {video}\n            </div>\n            <div className={\"footer\"}><Footer /></div>\n\n            <style jsx>{`\n                h3 {\n                    font-weight:bold;\n                    text-align:center;\n                }\n                p {\n                    text-align:center;\n                }\n                .red {\n                    color: red;\n                }\n                .board-container {\n                    margin-top: 50px;\n                    padding:5px\n                }\n                .video {\n                    width: 640px;\n                    margin: 0 5%;\n                    display: block;\n                    padding-top: 15px;\n                    margin-left: 10%;\n                    margin-right: 10%;\n                }\n                @media (min-width: 840px) {\n                    .board-container {\n                        margin: 100px 5px 5px 0px;\n\n                        min-height: 40%;\n                        padding: 5px;\n                    }\n                    .main {\n                        margin-top: 70px;\n                    }\n                    p {\n                        // float:right;\n                        text-align:left;\n                    }\n                    img {\n                        float:left;\n                        padding-right:20px;\n                    }\n                    .column {\n                        float: left;\n                        max-height:65%;\n                      }\n                      \n                      .left {\n                        width: 25%;\n\n                      }\n                      \n                      .right {\n                        width: 75%;\n                      }\n                      .footer {\n                            // bottom: 0;\n                            // margin-top: 100p;\n                            width: 95%;\n                            // position: fixed;\n                            // height: 200px;\n                            textAlign: center;\n                      }\n                      \n                }\n            `}</style>\n            <style global jsx>{`\n                // body {\n                //     background: black;\n                // }\n            `}</style>\n\n        </div >\n    );\n}\n\nexport async function getStaticProps() {\n\n    return {\n        props: {\n            boardData\n        },\n    }\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n\n    // Get the paths we want to pre-render based on posts\n    const paths = boardData.boards.map((board) => `/board-page/${board.model}`)\n\n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AAFA;AACA;AAIA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAHA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AA1BA;AACA;AA2BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4IA;;;;A","sourceRoot":""}